{"ast":null,"code":"var _jsxFileName = \"/Users/rafael.iozu/Work/Work/movieDBv2/db/src/Pages/Home.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { useSearchMoviesQuery } from '../store';\nimport SearchField from '../components/utils/SearchField';\nimport GridSkeleton from '../components/utils/GridSkeleton';\nimport MoviesList from '../components/Movies/MoviesList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function Home() {\n  _s();\n  const [searchMovies, setSearchMovies] = useState('');\n  const [searchPagination, setSearchPagination] = useState(0);\n  const [moviesList, setMoviesList] = useState([]);\n  const prevSearchDataRef = useRef();\n  const allMovies = [];\n  let page = 1;\n  const {\n    data: firstPageData,\n    error\n  } = useFetchFavoriteMoviesQuery(page);\n  if (error) {\n    // Handle the error, e.g., return an error or show a message\n    return null;\n  }\n  if (firstPageData) {\n    allMovies.push(...firstPageData.results);\n    while (page < firstPageData.total_pages) {\n      page++;\n      const {\n        data,\n        error\n      } = useFetchFavoriteMoviesQuery(page);\n      if (error) {\n        // Handle the error, e.g., return an error or show a message\n        return null;\n      }\n      if (data) {\n        allMovies.push(...data.results);\n      }\n    }\n  }\n  console.log(allFavoriteMovies);\n  //   const [favoriteMoviesList, setFavoriteMoviesList] = useState([]);\n\n  //   const {\n  //     data: favoriteMovies,\n  //     error: errorFetchingFavoriteMovies,\n  //     isFetching: isFetchingFavoriteMovies,\n  //   } = useFetchFavoriteMoviesQuery(1);\n\n  //   useEffect(() => {\n  //     if (favoriteMovies && favoriteMovies.results) {\n  //       setFavoriteMoviesList((prev) => [...prev, ...favoriteMovies.results]);\n  //     }\n  //   }, [favoriteMovies]);\n\n  const {\n    data: searchData,\n    error: errorSearch,\n    isFetching: isFetchingSearch\n  } = useSearchMoviesQuery({\n    searchTerm: searchMovies,\n    page: searchPagination\n  }, {\n    skip: searchMovies === ''\n  });\n  const onSearch = query => {\n    setSearchMovies(query);\n    setSearchPagination(1);\n  };\n  const loadNextPage = () => {\n    setSearchPagination(prev => prev + 1);\n  };\n  useEffect(() => {\n    const prevSearchData = prevSearchDataRef.current;\n    if (searchData !== prevSearchData && searchData.results) {\n      if (searchPagination === 1) setMoviesList(searchData.results);else {\n        setMoviesList(prevMovies => [...prevMovies, ...searchData.results]);\n      }\n    }\n    prevSearchDataRef.current = searchData;\n  }, [searchData, searchPagination]);\n  let content;\n  if (errorSearch) {\n    content = 'Error';\n  } else if (isFetchingSearch && !moviesList.length) {\n    content = /*#__PURE__*/_jsxDEV(GridSkeleton, {\n      count: 6\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }, this);\n  } else if (searchMovies !== '') {\n    content = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: moviesList,\n        nextPage: loadNextPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), isFetchingSearch && /*#__PURE__*/_jsxDEV(GridSkeleton, {\n        count: 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchField, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"S9OVPFNTSMgP90c9qnIxS7Y6yKA=\", true, function () {\n  return [useSearchMoviesQuery];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","useEffect","useRef","useSearchMoviesQuery","SearchField","GridSkeleton","MoviesList","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","searchMovies","setSearchMovies","searchPagination","setSearchPagination","moviesList","setMoviesList","prevSearchDataRef","allMovies","page","data","firstPageData","error","useFetchFavoriteMoviesQuery","push","results","total_pages","console","log","allFavoriteMovies","searchData","errorSearch","isFetching","isFetchingSearch","searchTerm","skip","onSearch","query","loadNextPage","prev","prevSearchData","current","prevMovies","content","length","count","fileName","_jsxFileName","lineNumber","columnNumber","children","movies","nextPage","_c","$RefreshReg$"],"sources":["/Users/rafael.iozu/Work/Work/movieDBv2/db/src/Pages/Home.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useSearchMoviesQuery } from '../store';\nimport SearchField from '../components/utils/SearchField';\nimport GridSkeleton from '../components/utils/GridSkeleton';\nimport MoviesList from '../components/Movies/MoviesList';\n\nasync function Home() {\n  const [searchMovies, setSearchMovies] = useState('');\n  const [searchPagination, setSearchPagination] = useState(0);\n  const [moviesList, setMoviesList] = useState([]);\n  const prevSearchDataRef = useRef();\n\n  const allMovies = [];\n  let page = 1;\n\n  const { data: firstPageData, error } = useFetchFavoriteMoviesQuery(page);\n\n  if (error) {\n    // Handle the error, e.g., return an error or show a message\n    return null;\n  }\n\n  if (firstPageData) {\n    allMovies.push(...firstPageData.results);\n\n    while (page < firstPageData.total_pages) {\n      page++;\n      const { data, error } = useFetchFavoriteMoviesQuery(page);\n\n      if (error) {\n        // Handle the error, e.g., return an error or show a message\n        return null;\n      }\n\n      if (data) {\n        allMovies.push(...data.results);\n      }\n    }\n  }\n\n  console.log(allFavoriteMovies);\n  //   const [favoriteMoviesList, setFavoriteMoviesList] = useState([]);\n\n  //   const {\n  //     data: favoriteMovies,\n  //     error: errorFetchingFavoriteMovies,\n  //     isFetching: isFetchingFavoriteMovies,\n  //   } = useFetchFavoriteMoviesQuery(1);\n\n  //   useEffect(() => {\n  //     if (favoriteMovies && favoriteMovies.results) {\n  //       setFavoriteMoviesList((prev) => [...prev, ...favoriteMovies.results]);\n  //     }\n  //   }, [favoriteMovies]);\n\n  const {\n    data: searchData,\n    error: errorSearch,\n    isFetching: isFetchingSearch,\n  } = useSearchMoviesQuery(\n    {\n      searchTerm: searchMovies,\n      page: searchPagination,\n    },\n    {\n      skip: searchMovies === '',\n    }\n  );\n\n  const onSearch = (query) => {\n    setSearchMovies(query);\n    setSearchPagination(1);\n  };\n\n  const loadNextPage = () => {\n    setSearchPagination((prev) => prev + 1);\n  };\n\n  useEffect(() => {\n    const prevSearchData = prevSearchDataRef.current;\n    if (searchData !== prevSearchData && searchData.results) {\n      if (searchPagination === 1) setMoviesList(searchData.results);\n      else {\n        setMoviesList((prevMovies) => [...prevMovies, ...searchData.results]);\n      }\n    }\n    prevSearchDataRef.current = searchData;\n  }, [searchData, searchPagination]);\n\n  let content;\n\n  if (errorSearch) {\n    content = 'Error';\n  } else if (isFetchingSearch && !moviesList.length) {\n    content = <GridSkeleton count={6} />;\n  } else if (searchMovies !== '') {\n    content = (\n      <>\n        <MoviesList movies={moviesList} nextPage={loadNextPage} />\n        {isFetchingSearch && <GridSkeleton count={6} />}\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <SearchField onSearch={onSearch} />\n      {content}\n    </div>\n  );\n}\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}