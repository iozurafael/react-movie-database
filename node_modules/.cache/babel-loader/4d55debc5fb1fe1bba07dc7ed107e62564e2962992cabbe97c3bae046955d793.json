{"ast":null,"code":"var _jsxFileName = \"/Users/rafael.iozu/Work/Work/movieDBv2/db/src/App.js\",\n  _s = $RefreshSig$();\nimport MoviesList from './components/Movies/MoviesList';\nimport Navbar from './components/Navigation/Navbar';\nimport { useState, useEffect } from 'react';\nimport { useSearchMoviesQuery } from './store';\nimport SearchField from './components/utils/SearchField';\nimport GridSkeleton from './components/utils/GridSkeleton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [searchMovies, setSearchMovies] = useState('');\n  const [searchPagination, setSearchPagination] = useState(0);\n  const [moviesList, setMoviesList] = useState([]);\n  const {\n    data: searchData,\n    error: errorSearch,\n    isFetching: isFetchingSearch\n  } = useSearchMoviesQuery({\n    searchTerm: searchMovies,\n    page: searchPagination\n  }, {\n    skip: searchMovies === ''\n    // refetchOnMountOrArgChange: true,\n  });\n\n  const onSearch = query => {\n    setSearchMovies(query);\n    setSearchPagination(1);\n  };\n  const loadNextPage = () => {\n    setSearchPagination(prev => prev + 1);\n  };\n  const loadPreviousPage = () => {\n    setSearchPagination(prev => prev - 1);\n  };\n  useEffect(() => {\n    if (searchData && searchData.results) {\n      if (searchPagination === 1) setMoviesList(searchData.results);else {\n        setMoviesList(prevMovies => [...prevMovies, ...searchData.results]);\n      }\n    }\n  }, [searchData]);\n  let content;\n  if (errorSearch) {\n    content = 'Error';\n  } else if (isFetchingSearch && !moviesList.length) {\n    content = /*#__PURE__*/_jsxDEV(GridSkeleton, {\n      count: 6\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }, this);\n  } else if (searchMovies !== '') {\n    content = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: moviesList,\n        nextPage: loadNextPage,\n        previousPage: loadPreviousPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), isFetchingSearch && /*#__PURE__*/_jsxDEV(GridSkeleton, {\n        count: 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchField, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OZnzDeH/DkS4CWxX1MIf9GJekpY=\", false, function () {\n  return [useSearchMoviesQuery];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["MoviesList","Navbar","useState","useEffect","useSearchMoviesQuery","SearchField","GridSkeleton","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","searchMovies","setSearchMovies","searchPagination","setSearchPagination","moviesList","setMoviesList","data","searchData","error","errorSearch","isFetching","isFetchingSearch","searchTerm","page","skip","onSearch","query","loadNextPage","prev","loadPreviousPage","results","prevMovies","content","length","count","fileName","_jsxFileName","lineNumber","columnNumber","children","movies","nextPage","previousPage","_c","$RefreshReg$"],"sources":["/Users/rafael.iozu/Work/Work/movieDBv2/db/src/App.js"],"sourcesContent":["import MoviesList from './components/Movies/MoviesList';\nimport Navbar from './components/Navigation/Navbar';\nimport { useState, useEffect } from 'react';\nimport { useSearchMoviesQuery } from './store';\nimport SearchField from './components/utils/SearchField';\nimport GridSkeleton from './components/utils/GridSkeleton';\n\nfunction App() {\n  const [searchMovies, setSearchMovies] = useState('');\n  const [searchPagination, setSearchPagination] = useState(0);\n  const [moviesList, setMoviesList] = useState([]);\n\n  const {\n    data: searchData,\n    error: errorSearch,\n    isFetching: isFetchingSearch,\n  } = useSearchMoviesQuery(\n    {\n      searchTerm: searchMovies,\n      page: searchPagination,\n    },\n    {\n      skip: searchMovies === '',\n      // refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const onSearch = (query) => {\n    setSearchMovies(query);\n    setSearchPagination(1);\n  };\n\n  const loadNextPage = () => {\n    setSearchPagination((prev) => prev + 1);\n  };\n\n  const loadPreviousPage = () => {\n    setSearchPagination((prev) => prev - 1);\n  };\n\n  useEffect(() => {\n    if (searchData && searchData.results) {\n      if (searchPagination === 1) setMoviesList(searchData.results);\n      else {\n        setMoviesList((prevMovies) => [...prevMovies, ...searchData.results]);\n      }\n    }\n  }, [searchData]);\n  let content;\n\n  if (errorSearch) {\n    content = 'Error';\n  } else if (isFetchingSearch && !moviesList.length) {\n    content = <GridSkeleton count={6} />;\n  } else if (searchMovies !== '') {\n    content = (\n      <>\n        <MoviesList\n          movies={moviesList}\n          nextPage={loadNextPage}\n          previousPage={loadPreviousPage}\n        />\n        {isFetchingSearch && <GridSkeleton count={6} />}\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <SearchField onSearch={onSearch} />\n      {content}\n    </div>\n  );\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}