{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst moviesApi = createApi({\n  reducerPath: 'movies',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://api.themoviedb.org/3/'\n  }),\n  endpoints(builder) {\n    return {\n      fetchMovies: builder.query({\n        query: page => {\n          return {\n            url: '/discover/movie',\n            method: 'GET',\n            params: {\n              language: 'en-US',\n              page: page\n            },\n            headers: {\n              accept: 'application/json',\n              Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzNzBjMzk2NzdmNTYwYTZiMmE5ZGRhZmFmMjU1YzE4NiIsInN1YiI6IjY1MjNlMDBkMDcyMTY2NDViNGZmNWFkOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.SNyfItT9pLMgujvWBB3NJXzrWpsSKkA8qO5jqleeuiY'\n            }\n          };\n        }\n      })\n    };\n  }\n});\nexport const {\n  useFetchMoviesQuery\n} = moviesApi;\nexport { moviesApi };\nconst fetchMoviesWithDelay = async page => {\n  const data = await moviesApi.endpoints.fetchMovies(page).promise;\n\n  // Introduce a 5-second (5000 milliseconds) delay\n  await new Promise(resolve => setTimeout(resolve, 5000));\n  return data;\n};","map":{"version":3,"names":["createApi","fetchBaseQuery","moviesApi","reducerPath","baseQuery","baseUrl","endpoints","builder","fetchMovies","query","page","url","method","params","language","headers","accept","Authorization","useFetchMoviesQuery","fetchMoviesWithDelay","data","promise","Promise","resolve","setTimeout"],"sources":["/Users/rafael.iozu/Work/Work/movieDBv2/db/src/store/apis/moviesApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst moviesApi = createApi({\n  reducerPath: 'movies',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://api.themoviedb.org/3/',\n  }),\n  endpoints(builder) {\n    return {\n      fetchMovies: builder.query({\n        query: (page) => {\n          return {\n            url: '/discover/movie',\n            method: 'GET',\n            params: {\n              language: 'en-US',\n              page: page,\n            },\n            headers: {\n              accept: 'application/json',\n              Authorization:\n                'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzNzBjMzk2NzdmNTYwYTZiMmE5ZGRhZmFmMjU1YzE4NiIsInN1YiI6IjY1MjNlMDBkMDcyMTY2NDViNGZmNWFkOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.SNyfItT9pLMgujvWBB3NJXzrWpsSKkA8qO5jqleeuiY',\n            },\n          };\n        },\n      }),\n    };\n  },\n});\n\nexport const { useFetchMoviesQuery } = moviesApi;\nexport { moviesApi };\n\nconst fetchMoviesWithDelay = async (page) => {\n  const data = await moviesApi.endpoints.fetchMovies(page).promise;\n\n  // Introduce a 5-second (5000 milliseconds) delay\n  await new Promise((resolve) => setTimeout(resolve, 5000));\n\n  return data;\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,MAAMC,SAAS,GAAGF,SAAS,CAAC;EAC1BG,WAAW,EAAE,QAAQ;EACrBC,SAAS,EAAEH,cAAc,CAAC;IACxBI,OAAO,EAAE;EACX,CAAC,CAAC;EACFC,SAASA,CAACC,OAAO,EAAE;IACjB,OAAO;MACLC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAC;QACzBA,KAAK,EAAGC,IAAI,IAAK;UACf,OAAO;YACLC,GAAG,EAAE,iBAAiB;YACtBC,MAAM,EAAE,KAAK;YACbC,MAAM,EAAE;cACNC,QAAQ,EAAE,OAAO;cACjBJ,IAAI,EAAEA;YACR,CAAC;YACDK,OAAO,EAAE;cACPC,MAAM,EAAE,kBAAkB;cAC1BC,aAAa,EACX;YACJ;UACF,CAAC;QACH;MACF,CAAC;IACH,CAAC;EACH;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEC;AAAoB,CAAC,GAAGhB,SAAS;AAChD,SAASA,SAAS;AAElB,MAAMiB,oBAAoB,GAAG,MAAOT,IAAI,IAAK;EAC3C,MAAMU,IAAI,GAAG,MAAMlB,SAAS,CAACI,SAAS,CAACE,WAAW,CAACE,IAAI,CAAC,CAACW,OAAO;;EAEhE;EACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EAEzD,OAAOH,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}