{"ast":null,"code":"var _jsxFileName = \"/Users/rafael.iozu/Work/Work/movieDBv2/db/src/components/Movies/MoviesList.js\",\n  _s = $RefreshSig$();\nimport { useFetchMoviesQuery } from '../../store';\nimport Button from '../utils/Button';\nimport MovieItem from './MovieItem';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MoviesList() {\n  _s();\n  const [moviePagination, setMoviePagination] = useState(1);\n  const {\n    data,\n    error,\n    isFetching\n  } = useFetchMoviesQuery(moviePagination);\n  const [movies, setMovies] = useState([]);\n  const handleLoadMoreMovies = () => {\n    setMoviePagination(moviePagination + 1);\n  };\n  useEffect(() => {\n    if (data && data.results) {\n      // Get the current scroll position before adding new movies\n      const currentScrollPosition = window.scrollY;\n\n      // Append new movies to the list\n      setMovies(prevMovies => [...prevMovies, ...data.results]);\n\n      // Scroll to the saved scroll position after appending movies\n      window.scrollTo(0, currentScrollPosition);\n\n      // Update the scrollPosition state to match the current position\n      setScrollPosition(currentScrollPosition);\n    }\n  }, [data]);\n  let content;\n  if (isFetching && !movies.length) content = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 47\n  }, this);else if (error) content = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 29\n  }, this);else {\n    const movieItems = movies.map(movie => {\n      return /*#__PURE__*/_jsxDEV(MovieItem, {\n        movie: movie\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }, this);\n    });\n    content = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movies-grid\",\n        children: movieItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleLoadMoreMovies,\n        children: \"Load more movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movies list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(MoviesList, \"tmKUTCsx7ztDVhQtEGEjnDdJFUI=\", false, function () {\n  return [useFetchMoviesQuery];\n});\n_c = MoviesList;\nexport default MoviesList;\nvar _c;\n$RefreshReg$(_c, \"MoviesList\");","map":{"version":3,"names":["useFetchMoviesQuery","Button","MovieItem","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","MoviesList","_s","moviePagination","setMoviePagination","data","error","isFetching","movies","setMovies","handleLoadMoreMovies","results","currentScrollPosition","window","scrollY","prevMovies","scrollTo","setScrollPosition","content","length","children","fileName","_jsxFileName","lineNumber","columnNumber","movieItems","map","movie","id","className","onClick","_c","$RefreshReg$"],"sources":["/Users/rafael.iozu/Work/Work/movieDBv2/db/src/components/Movies/MoviesList.js"],"sourcesContent":["import { useFetchMoviesQuery } from '../../store';\nimport Button from '../utils/Button';\nimport MovieItem from './MovieItem';\nimport { useState, useEffect } from 'react';\nfunction MoviesList() {\n  const [moviePagination, setMoviePagination] = useState(1);\n  const { data, error, isFetching } = useFetchMoviesQuery(moviePagination);\n  const [movies, setMovies] = useState([]);\n\n  const handleLoadMoreMovies = () => {\n    setMoviePagination(moviePagination + 1);\n  };\n\n  useEffect(() => {\n    if (data && data.results) {\n      // Get the current scroll position before adding new movies\n      const currentScrollPosition = window.scrollY;\n\n      // Append new movies to the list\n      setMovies((prevMovies) => [...prevMovies, ...data.results]);\n\n      // Scroll to the saved scroll position after appending movies\n      window.scrollTo(0, currentScrollPosition);\n\n      // Update the scrollPosition state to match the current position\n      setScrollPosition(currentScrollPosition);\n    }\n  }, [data]);\n\n  let content;\n\n  if (isFetching && !movies.length) content = <div>Loading..</div>;\n  else if (error) content = <div>Error</div>;\n  else {\n    const movieItems = movies.map((movie) => {\n      return <MovieItem key={movie.id} movie={movie} />;\n    });\n\n    content = (\n      <>\n        <div className=\"movies-grid\">{movieItems}</div>\n        <Button onClick={handleLoadMoreMovies}>Load more movies</Button>\n      </>\n    );\n  }\n  return (\n    <div>\n      <h1>Movies list</h1>\n      {content}\n    </div>\n  );\n}\n\nexport default MoviesList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}